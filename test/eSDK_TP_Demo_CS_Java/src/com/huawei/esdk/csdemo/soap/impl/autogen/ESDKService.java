package com.huawei.esdk.csdemo.soap.impl.autogen;

import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 2.6.10
 * 2015-01-27T19:31:56.839+08:00
 * Generated source version: 2.6.10
 * 
 */
@WebServiceClient(name = "eSDKService", 
                  wsdlLocation = "esdk_tp_professional.wsdl",
                  targetNamespace = "http://smc.huawei.com/") 
public class ESDKService extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://smc.huawei.com/", "eSDKService");
    public final static QName TPProfessionalMCUMgr = new QName("http://smc.huawei.com/", "TPProfessional.MCUMgr");
    public final static QName TPProfessionalSiteMgr = new QName("http://smc.huawei.com/", "TPProfessional.SiteMgr");
    public final static QName TPProfessionalTerminalConfCtr = new QName("http://smc.huawei.com/", "TPProfessional.TerminalConfCtr");
    public final static QName TPProfessionalOrgaMgr = new QName("http://smc.huawei.com/", "TPProfessional.OrgaMgr");
    public final static QName TPCommon = new QName("http://smc.huawei.com/", "TP.Common");
    public final static QName TPProfessionalConfMgr = new QName("http://smc.huawei.com/", "TPProfessional.ConfMgr");
    public final static QName TPProfessionalConfCtr = new QName("http://smc.huawei.com/", "TPProfessional.ConfCtr");
    static {
        URL url = ESDKService.class.getResource("esdk_tp_professional.wsdl");
        if (url == null) {
            url = ESDKService.class.getClassLoader().getResource("esdk_tp_professional.wsdl");
        } 
        if (url == null) {
            java.util.logging.Logger.getLogger(ESDKService.class.getName())
                .log(java.util.logging.Level.INFO, 
                     "Can not initialize the default wsdl from {0}", "esdk_tp_professional.wsdl");
        }       
        WSDL_LOCATION = url;
    }

    public ESDKService(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public ESDKService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public ESDKService() {
        super(WSDL_LOCATION, SERVICE);
    }
    
    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public ESDKService(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public ESDKService(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public ESDKService(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }

    /**
     *
     * @return
     *     returns TPProfessionalMCUMgr
     */
    @WebEndpoint(name = "TPProfessional.MCUMgr")
    public TPProfessionalMCUMgr getTPProfessionalMCUMgr() {
        return super.getPort(TPProfessionalMCUMgr, TPProfessionalMCUMgr.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns TPProfessionalMCUMgr
     */
    @WebEndpoint(name = "TPProfessional.MCUMgr")
    public TPProfessionalMCUMgr getTPProfessionalMCUMgr(WebServiceFeature... features) {
        return super.getPort(TPProfessionalMCUMgr, TPProfessionalMCUMgr.class, features);
    }
    /**
     *
     * @return
     *     returns TPProfessionalSiteMgr
     */
    @WebEndpoint(name = "TPProfessional.SiteMgr")
    public TPProfessionalSiteMgr getTPProfessionalSiteMgr() {
        return super.getPort(TPProfessionalSiteMgr, TPProfessionalSiteMgr.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns TPProfessionalSiteMgr
     */
    @WebEndpoint(name = "TPProfessional.SiteMgr")
    public TPProfessionalSiteMgr getTPProfessionalSiteMgr(WebServiceFeature... features) {
        return super.getPort(TPProfessionalSiteMgr, TPProfessionalSiteMgr.class, features);
    }
    /**
     *
     * @return
     *     returns TPProfessionalTerminalConfCtr
     */
    @WebEndpoint(name = "TPProfessional.TerminalConfCtr")
    public TPProfessionalTerminalConfCtr getTPProfessionalTerminalConfCtr() {
        return super.getPort(TPProfessionalTerminalConfCtr, TPProfessionalTerminalConfCtr.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns TPProfessionalTerminalConfCtr
     */
    @WebEndpoint(name = "TPProfessional.TerminalConfCtr")
    public TPProfessionalTerminalConfCtr getTPProfessionalTerminalConfCtr(WebServiceFeature... features) {
        return super.getPort(TPProfessionalTerminalConfCtr, TPProfessionalTerminalConfCtr.class, features);
    }
    /**
     *
     * @return
     *     returns TPProfessionalOrgaMgr
     */
    @WebEndpoint(name = "TPProfessional.OrgaMgr")
    public TPProfessionalOrgaMgr getTPProfessionalOrgaMgr() {
        return super.getPort(TPProfessionalOrgaMgr, TPProfessionalOrgaMgr.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns TPProfessionalOrgaMgr
     */
    @WebEndpoint(name = "TPProfessional.OrgaMgr")
    public TPProfessionalOrgaMgr getTPProfessionalOrgaMgr(WebServiceFeature... features) {
        return super.getPort(TPProfessionalOrgaMgr, TPProfessionalOrgaMgr.class, features);
    }
    /**
     *
     * @return
     *     returns TPCommon
     */
    @WebEndpoint(name = "TP.Common")
    public TPCommon getTPCommon() {
        return super.getPort(TPCommon, TPCommon.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns TPCommon
     */
    @WebEndpoint(name = "TP.Common")
    public TPCommon getTPCommon(WebServiceFeature... features) {
        return super.getPort(TPCommon, TPCommon.class, features);
    }
    /**
     *
     * @return
     *     returns TPProfessionalConfMgr
     */
    @WebEndpoint(name = "TPProfessional.ConfMgr")
    public TPProfessionalConfMgr getTPProfessionalConfMgr() {
        return super.getPort(TPProfessionalConfMgr, TPProfessionalConfMgr.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns TPProfessionalConfMgr
     */
    @WebEndpoint(name = "TPProfessional.ConfMgr")
    public TPProfessionalConfMgr getTPProfessionalConfMgr(WebServiceFeature... features) {
        return super.getPort(TPProfessionalConfMgr, TPProfessionalConfMgr.class, features);
    }
    /**
     *
     * @return
     *     returns TPProfessionalConfCtr
     */
    @WebEndpoint(name = "TPProfessional.ConfCtr")
    public TPProfessionalConfCtr getTPProfessionalConfCtr() {
        return super.getPort(TPProfessionalConfCtr, TPProfessionalConfCtr.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns TPProfessionalConfCtr
     */
    @WebEndpoint(name = "TPProfessional.ConfCtr")
    public TPProfessionalConfCtr getTPProfessionalConfCtr(WebServiceFeature... features) {
        return super.getPort(TPProfessionalConfCtr, TPProfessionalConfCtr.class, features);
    }

}
